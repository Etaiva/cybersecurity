Part 1
This version focuses on system requirements, governance frameworks, cybersecurity standards, and lab setup guidelines. 
It’s structured for modular deployment and stakeholder clarity.

# 📘 Standards & Requirements Glossary (Part 1)

This glossary consolidates key standards, frameworks, and system requirements referenced in the attached document. It is formatted for GitHub Pages and stakeholder-ready documentation.

---

## 🖥️ System Requirements: Kali Linux

| Component         | Minimum Requirement | Recommended Requirement | Strategic Commentary |
|------------------|---------------------|--------------------------|----------------------|
| RAM              | 2 GB                | 4–8 GB                   | More RAM enables smoother multitasking and VM usage |
| Disk Space       | 20 GB               | 50 GB+ (preferably SSD)  | SSD improves performance; larger space supports toolsets and data |
| Processor        | 1 GHz               | 2 GHz+, multi-core       | Faster CPUs improve brute-force and analysis tasks |
| Graphics Card    | Standard GPU        | High-end GPU (e.g., RTX) | Required for GPU-accelerated tools like Hashcat |
| Network Adapter  | Basic NIC           | Promiscuous mode support | Needed for packet capture, injection, and Wi-Fi testing |

---

## 🧪 Penetration Testing Lab Setup

| Requirement                     | Description |
|--------------------------------|-------------|
| Closed Network                 | Restricts internet access for controlled testing |
| Virtualized Environment        | Enables rollback and multi-OS deployment |
| Realistic Environment          | Mirrors production systems for valid results |
| Health Monitoring              | Diagnoses crashes and system failures |
| Sufficient Hardware Resources  | Prevents false positives due to resource limits |
| Multiple Operating Systems     | Ensures cross-platform validation |
| Duplicate Tools                | Confirms results with tool redundancy |
| Practice Targets               | Safe systems for exploit testing |

---

## 🏛️ Governance Frameworks

| Framework         | Focus Area                  | Key Feature |
|------------------|-----------------------------|-------------|
| PTES              | Penetration Testing         | Repeatable phases |
| NIST SP 800-115   | Security Assessment         | Governance-aligned lifecycle |
| OSSTMM            | Operational Security        | Trust analysis, workflow modeling |
| OWASP WSTG        | Web App Security            | Input validation, session management |
| MITRE ATT&CK      | Threat Simulation           | Tactics, techniques, procedures (TTPs) |

---

## 🔐 ISO & Compliance Standards

| Standard         | Description |
|------------------|-------------|
| ISO/IEC 27001    | Information Security Management System (ISMS) |
| ISO/IEC 9075     | SQL Standard (2023 Edition) |
| FIPS 140-2       | U.S. encryption validation standard |
| GDPR             | EU data protection regulation |
| POPIA            | South African data privacy law |
| AI Act           | Proposed EU regulation for AI governance |
| Companies Act    | South African corporate governance law |
| King IV          | Corporate governance code for South Africa |
| Sarbanes-Oxley   | U.S. financial compliance law |

---

## 🧠 AI Governance Requirements

| Element                  | Description |
|--------------------------|-------------|
| Ethical Oversight        | Avoid bias, discrimination, and harm |
| Transparency             | Explainable decisions and traceable logic |
| Accountability           | Clear ownership and escalation paths |
| Compliance               | Alignment with GDPR, POPIA, AI Act |
| Lifecycle Management     | Oversight from design to decommissioning |
| Stakeholder Alignment    | Legal, HR, IT, and operations integration |

---

Let me know when you're ready for **Part 2**, which will include:

- 🔗 ISO 27001 control mappings  
- 🧩 Board-level governance integration  
- 🔐 FTP & API security best practices  
- 📚 SQL/IEC 9075 breakdown  
- 🧠 OWASP ASVS mappings and XSS mitigation controls

I’ll keep each segment clean, modular, and GitHub-ready.

Thanks, Etienne. Here's Part 2 of the GitHub-ready glossary consolidating standards and requirements from your draft.docx attachment. This segment focuses on:

🧠 ISO & Governance Frameworks

🔐 FTP & API Security Best Practices

📚 SQL/IEC 9075 Breakdown

🧩 OWASP ASVS Mapping

# 📘 Standards & Requirements Glossary (Part 2)

---

## 🧠 ISO & Governance Frameworks

### 🔐 ISO/IEC 27001 – Information Security Management System (ISMS)

| Control Area | Board-Level Integration |
|--------------|--------------------------|
| A.5 – Security Policies | Approve AI and cyber governance policies |
| A.6 – IS Security Organization | Define roles for AI ethics, CISO, governance leads |
| A.8 – Asset Management | Classify AI models and data assets |
| A.12 – Operations Security | Oversee firewall protocols, access controls, monitoring |
| A.18 – Compliance | Ensure systems meet regulatory and contractual obligations |

---

### 🏛️ Corporate Governance Principles

| Principle     | Description |
|---------------|-------------|
| Accountability| Boards answer to shareholders and stakeholders |
| Transparency  | Clear reporting and disclosure practices |
| Fairness      | Equitable treatment of all stakeholders |
| Responsibility| Ethical decision-making and risk management |
| Compliance    | Adherence to legal and regulatory standards |

---

### 🤖 AI Governance Principles

| Principle     | Description |
|---------------|-------------|
| Ethical Oversight | Avoid bias, discrimination, and harm |
| Transparency      | Explainable decisions and traceable logic |
| Accountability    | Clear ownership and escalation paths |
| Compliance        | Alignment with GDPR, POPIA, AI Act |
| Lifecycle Oversight| From design to decommissioning |

---

## 🔐 FTP Server Security Best Practices

| Practice | Description |
|----------|-------------|
| Strong Passwords & MFA | Use credential management and two-factor authentication |
| File/Folder Security | Restrict access to authorized users only |
| Encryption at Rest | Encrypt stored files on the FTP server |
| Admin Account Lockdown | Limit admin privileges and avoid default usernames |
| Software Updates | Keep FTPS/SFTP server software current |
| FIPS 140-2 Ciphers | Use validated encryption algorithms |
| Backend Isolation | Host databases on separate servers |
| Session Re-authentication | Require re-login after inactivity |

---

## 📚 ISO/IEC 9075 (SQL Standard – 2023 Edition)

| Part      | Title                                | Description |
|-----------|--------------------------------------|-------------|
| 9075-1    | SQL/Framework                         | Overall structure, terms, grammar |
| 9075-2    | SQL/Foundation                        | Core syntax and semantics |
| 9075-3    | SQL/CLI                               | Procedural API access |
| 9075-4    | SQL/PSM                               | Stored procedures and control structures |
| 9075-9    | SQL/MED                               | External data access |
| 9075-10   | SQL/OLB                               | Object-oriented language bindings |
| 9075-11   | SQL Schemas                           | Metadata and schema definitions |
| 9075-13   | SQL/JRT                               | Java integration |
| 9075-14   | SQL/XML                               | XML support in SQL |
| 9075-15   | SQL/MDA                               | Multidimensional arrays |
| 9075-16   | SQL/PGQ                               | Property graph queries |

---

## 🔐 API Security Best Practices

| Practice | Description |
|----------|-------------|
| HTTPS with Strong TLS | Secure endpoints with modern encryption |
| Parameter Validation | Sanitize incoming data from clients |
| Signature Scanning | Detect common injection patterns |
| Strong AuthN/AuthZ | Use OAuth, JWT, or similar standards |
| Tiered Architecture | Separate API logic from security enforcement |
| Sensitive Data Classification | Define public vs protected data |
| Expert Code Review | Include security audits in development |
| Internal Documentation | Mandatory for all APIs |
| Public Silence | Avoid discussing API details on forums |

---

## 🧩 OWASP ASVS Mapping: XSS Mitigation Controls

| ASVS Requirement | Control Description | Mapped Mitigation |
|------------------|---------------------|--------------------|
| 5.1.1 Output Encoding | Encode all untrusted output | HTML, Attribute, JS, CSS, URL escaping |
| 5.1.2 Context-Specific Encoding | Match encoding to context | Auto-escaping template systems |
| 5.1.3 Safe HTML Rendering | Sanitize HTML before rendering | ESAPI, DOMPurify |
| 5.2.1 DOM-Based XSS Prevention | Avoid dynamic code from untrusted input | DOM XSS Cheat Sheet |
| 5.2.2 CSP Enforcement | Block unsafe inline scripts | Content Security Policy |
| 5.2.3 HTTPOnly Cookies | Prevent client-side cookie access | HTTPOnly flag |
| 5.2.4 XSS Protection Headers | Enable legacy browser filters | X-XSS-Protection header |
| 5.3.1 Unicode & Entity Encoding | Encode special characters safely | HTML Entity Encoding, Unicode Escaping |

---

Let me know when you're ready for **Part 3**, which will include:

- 📋 XSS Mitigation Checklist  
- 🧠 Governance vs Cybersecurity Strategic Comparison  
- 🧭 Board-Level Integration Map  
- 🔐 Shared Responsibility Models (AWS, ISO, NIST)

I’ll keep it clean, modular, and GitHub-ready.

Here's Part 3 of the GitHub-ready glossary focused on standards and requirements from your draft.docx attachment. This segment covers:

🔐 ISO/IEC 9075 SQL Standard Breakdown

🔗 API Security Best Practices

🧩 OWASP ASVS Mapping for XSS Mitigation

📋 XSS Mitigation Checklist

🧭 Shared Responsibility Models

# 📘 Standards & Requirements Glossary (Part 3)

---

## 🔐 ISO/IEC 9075 – SQL Standard (2023 Edition)

| Part      | Title                                | Description |
|-----------|--------------------------------------|-------------|
| 9075-1    | SQL/Framework                         | Overall structure, terms, grammar |
| 9075-2    | SQL/Foundation                        | Core syntax and semantics |
| 9075-3    | SQL/CLI                               | Procedural API access |
| 9075-4    | SQL/PSM                               | Stored procedures and control structures |
| 9075-9    | SQL/MED                               | External data access |
| 9075-10   | SQL/OLB                               | Object-oriented language bindings |
| 9075-11   | SQL Schemas                           | Metadata and schema definitions |
| 9075-13   | SQL/JRT                               | Java integration |
| 9075-14   | SQL/XML                               | XML support in SQL |
| 9075-15   | SQL/MDA                               | Multidimensional arrays |
| 9075-16   | SQL/PGQ                               | Property graph queries |

---

## 🔗 API Security Best Practices

| Practice | Description |
|----------|-------------|
| HTTPS with Strong TLS | Secure endpoints with modern encryption |
| Parameter Validation | Sanitize incoming data from clients |
| Signature Scanning | Detect common injection patterns |
| Strong AuthN/AuthZ | Use OAuth, JWT, or similar standards |
| Tiered Architecture | Separate API logic from security enforcement |
| Sensitive Data Classification | Define public vs protected data |
| Expert Code Review | Include security audits in development |
| Internal Documentation | Mandatory for all APIs |
| Public Silence | Avoid discussing API details on forums |

---

## 🧩 OWASP ASVS Mapping: XSS Mitigation Controls

| ASVS Requirement | Control Description | Mapped Mitigation |
|------------------|---------------------|--------------------|
| 5.1.1 Output Encoding | Encode all untrusted output | HTML, Attribute, JS, CSS, URL escaping |
| 5.1.2 Context-Specific Encoding | Match encoding to context | Auto-escaping template systems |
| 5.1.3 Safe HTML Rendering | Sanitize HTML before rendering | ESAPI, DOMPurify |
| 5.2.1 DOM-Based XSS Prevention | Avoid dynamic code from untrusted input | DOM XSS Cheat Sheet |
| 5.2.2 CSP Enforcement | Block unsafe inline scripts | Content Security Policy |
| 5.2.3 HTTPOnly Cookies | Prevent client-side cookie access | HTTPOnly flag |
| 5.2.4 XSS Protection Headers | Enable legacy browser filters | X-XSS-Protection header |
| 5.3.1 Unicode & Entity Encoding | Encode special characters safely | HTML Entity Encoding, Unicode Escaping |

---

## 📋 XSS Mitigation Checklist

- [x] Use auto-escaping template systems (e.g., React, Angular, Django)
- [x] Escape untrusted data before inserting into:
  - HTML element content
  - HTML attributes
  - JavaScript values
  - CSS properties
  - URL parameters
- [x] Sanitize HTML using libraries (e.g., DOMPurify, ESAPI)
- [x] Prevent DOM-based XSS (refer to OWASP DOM XSS Cheat Sheet)
- [x] Set HTTPOnly flag on cookies
- [x] Implement Content Security Policy (CSP)
- [x] Use X-XSS-Protection header (legacy support)
- [x] Encode special characters:
  - `&` → `&amp;`
  - `<` → `&lt;`
  - `>` → `&gt;`
  - `"` → `&quot;`
  - `'` → `&#x27;`
  - `/` → `&#x2F;`
- [x] Use `&#xHH;` for HTML entity encoding
- [x] Use `\uXXXX` for Unicode escaping
- [x] Use `\XX` or `\XXXXXX` for CSS escaping
- [x] Educate users on safe browsing practices

---

## 🧭 Shared Responsibility Models

| Provider | Model Summary | Governance Implication |
|----------|----------------|-------------------------|
| AWS | AWS secures infrastructure; customer secures data, apps, identity | Boards must oversee cloud configuration and access controls |
| Azure | Microsoft secures platform; customer secures workloads | Governance teams must align cloud policies with ISO 27001 |
| GCP | Google secures services; customer secures usage | Shared risk must be documented in compliance architecture |

---

Let me know when you're ready for **Part 4**, which will include:

- 🧠 Governance vs Cybersecurity Strategic Comparison  
- 🏛️ Board-Level Integration Map  
- 🔐 FTP Server Hardening  
- 📚 Final wrap-up with deployment notes and GitHub structuring tips

I’ll keep it clean, modular, and GitHub-ready.

Here's Part 4 of the GitHub-ready glossary focused on standards and requirements from the draft.docx attachment. This segment covers:

🧭 Board-Level Governance Integration

🔐 ISO 27001 Alignment Touchpoints

🛡️ FTP Server Hardening Best Practices

📚 ISO/IEC 9075 SQL Standard Breakdown

🔗 API Security Best Practices

# 📘 Standards & Requirements Glossary (Part 4)

---

## 🧭 Board-Level Governance Integration Map

### 🏛️ Governance Pillars

| Pillar            | Corporate Governance                            | AI Governance                                       | Cybersecurity Governance                          |
|-------------------|--------------------------------------------------|----------------------------------------------------|---------------------------------------------------|
| Accountability     | Board fiduciary duties, audit committees         | Responsible AI officers, ethics boards             | CISO, ISMS oversight, breach accountability       |
| Transparency       | Financial disclosures, stakeholder reporting     | Explainable AI, model documentation                | Security dashboards, incident logs                |
| Risk Management    | Strategic, operational, reputational risk        | Algorithmic bias, data misuse, ethical drift       | Threat detection, vulnerability management        |
| Compliance         | King IV, Companies Act, ESG mandates             | GDPR, AI Act, POPIA, internal AI policies          | ISO 27001, NIST CSF, POPIA, GDPR                  |
| Ethical Oversight  | Whistleblower policies, board charters          | Fairness, non-discrimination, human-centric design | Data ethics, responsible access, privacy safeguards|

---

### 🧠 Strategic Oversight Domains

| Domain                  | Board-Level Focus |
|------------------------|-------------------|
| AI Systems             | Approve usage policies, monitor bias audits, ensure ethical deployment |
| Cybersecurity Posture  | Review ISMS reports, firewall policies, incident response plans |
| Compliance Architecture| Align AI and cyber controls with legal mandates |
| Stakeholder Trust      | Communicate governance maturity across domains |
| Innovation Strategy    | Balance responsible tech adoption with ethical foresight |

---

## 🔐 ISO 27001 Alignment Touchpoints

| ISO Control Area                  | Board-Level Integration |
|----------------------------------|--------------------------|
| A.5: Information Security Policies| Approve AI and cyber governance policies |
| A.6: Organization of IS Security | Define roles for AI ethics, CISO, governance leads |
| A.8: Asset Management            | Classify AI models and data assets |
| A.12: Operations Security        | Oversee firewall protocols, access controls, monitoring |
| A.18: Compliance                 | Ensure systems meet regulatory and contractual obligations |

---

## 🛡️ FTP Server Hardening Best Practices

| Practice                        | Description |
|--------------------------------|-------------|
| Strong Passwords & MFA         | Use credential management and two-factor authentication |
| File/Folder Security           | Restrict access to authorized users only |
| Encryption at Rest             | Encrypt stored files on the FTP server |
| Admin Account Lockdown         | Limit admin privileges and avoid default usernames |
| Software Updates               | Keep FTPS/SFTP server software current |
| FIPS 140-2 Ciphers             | Use validated encryption algorithms |
| Backend Isolation              | Host databases on separate servers |
| Session Re-authentication     | Require re-login after inactivity |

---

## 📚 ISO/IEC 9075 SQL Standard – 2023 Edition

| Part      | Title                                | Description |
|-----------|--------------------------------------|-------------|
| 9075-1    | SQL/Framework                         | Overall structure, terms, grammar |
| 9075-2    | SQL/Foundation                        | Core syntax and semantics |
| 9075-3    | SQL/CLI                               | Procedural API access |
| 9075-4    | SQL/PSM                               | Stored procedures and control structures |
| 9075-9    | SQL/MED                               | External data access |
| 9075-10   | SQL/OLB                               | Object-oriented language bindings |
| 9075-11   | SQL Schemas                           | Metadata and schema definitions |
| 9075-13   | SQL/JRT                               | Java integration |
| 9075-14   | SQL/XML                               | XML support in SQL |
| 9075-15   | SQL/MDA                               | Multidimensional arrays |
| 9075-16   | SQL/PGQ                               | Property graph queries |

---

## 🔗 API Security Best Practices

| Practice                        | Description |
|--------------------------------|-------------|
| HTTPS with Strong TLS          | Secure endpoints with modern encryption |
| Parameter Validation           | Sanitize incoming data from clients |
| Signature Scanning             | Detect common injection patterns |
| Strong AuthN/AuthZ             | Use OAuth, JWT, or similar standards |
| Tiered Architecture            | Separate API logic from security enforcement |
| Sensitive Data Classification  | Define public vs protected data |
| Expert Code Review             | Include security audits in development |
| Internal Documentation         | Mandatory for all APIs |
| Public Silence                 | Avoid discussing API details on forums |

Here's Part 5 of the GitHub-ready glossary focused on standards and requirements from the draft.docx attachment. This segment covers:

✅ FTP Server Security Requirements

📚 ISO/IEC 9075 SQL Standard Breakdown

🔐 API Security Best Practices

🧩 OWASP ASVS Mapping for XSS

📋 XSS Mitigation Checklist

# 📘 Standards & Requirements Glossary (Part 5)

---

## ✅ FTP Server Security Requirements

| Requirement | Description |
|-------------|-------------|
| Strong Passwords & MFA | Use credential management and two-factor authentication |
| File/Folder Security | Restrict access to authorized users only |
| Encryption at Rest | Encrypt stored files on the FTP server |
| Admin Account Lockdown | Limit admin privileges and avoid default usernames |
| Software Updates | Keep FTPS/SFTP server software current |
| FIPS 140-2 Ciphers | Use validated encryption algorithms |
| Backend Isolation | Host databases on separate servers |
| Session Re-authentication | Require re-login after inactivity |

---

## 📚 ISO/IEC 9075 SQL Standard – 2023 Edition

| Part      | Title                                | Description |
|-----------|--------------------------------------|-------------|
| 9075-1    | SQL/Framework                         | Overall structure, terms, grammar |
| 9075-2    | SQL/Foundation                        | Core syntax and semantics |
| 9075-3    | SQL/CLI                               | Procedural API access |
| 9075-4    | SQL/PSM                               | Stored procedures and control structures |
| 9075-9    | SQL/MED                               | External data access |
| 9075-10   | SQL/OLB                               | Object-oriented language bindings |
| 9075-11   | SQL Schemas                           | Metadata and schema definitions |
| 9075-13   | SQL/JRT                               | Java integration |
| 9075-14   | SQL/XML                               | XML support in SQL |
| 9075-15   | SQL/MDA                               | Multidimensional arrays |
| 9075-16   | SQL/PGQ                               | Property graph queries |

---

## 🔐 API Security Best Practices

| Practice | Description |
|----------|-------------|
| HTTPS with Strong TLS | Secure endpoints with modern encryption |
| Parameter Validation | Sanitize incoming data from clients |
| Signature Scanning | Detect common injection patterns |
| Strong AuthN/AuthZ | Use OAuth, JWT, or similar standards |
| Tiered Architecture | Separate API logic from security enforcement |
| Sensitive Data Classification | Define public vs protected data |
| Expert Code Review | Include security audits in development |
| Internal Documentation | Mandatory for all APIs |
| Public Silence | Avoid discussing API details on forums |

---

## 🧩 OWASP ASVS Mapping: XSS Mitigation Controls

| ASVS Requirement | Control Description | Mapped Mitigation |
|------------------|---------------------|--------------------|
| 5.1.1 Output Encoding | Encode all untrusted output | HTML, Attribute, JS, CSS, URL escaping |
| 5.1.2 Context-Specific Encoding | Match encoding to context | Auto-escaping template systems |
| 5.1.3 Safe HTML Rendering | Sanitize HTML before rendering | ESAPI, DOMPurify |
| 5.2.1 DOM-Based XSS Prevention | Avoid dynamic code from untrusted input | DOM XSS Cheat Sheet |
| 5.2.2 CSP Enforcement | Block unsafe inline scripts | Content Security Policy |
| 5.2.3 HTTPOnly Cookies | Prevent client-side cookie access | HTTPOnly flag |
| 5.2.4 XSS Protection Headers | Enable legacy browser filters | X-XSS-Protection header |
| 5.3.1 Unicode & Entity Encoding | Encode special characters safely | HTML Entity Encoding, Unicode Escaping |

---

## 📋 XSS Mitigation Checklist

- [x] Use auto-escaping template systems (e.g., React, Angular, Django)
- [x] Escape untrusted data before inserting into:
  - HTML element content
  - HTML attributes
  - JavaScript values
  - CSS properties
  - URL parameters
- [x] Sanitize HTML using libraries (e.g., DOMPurify, ESAPI)
- [x] Prevent DOM-based XSS (refer to OWASP DOM XSS Cheat Sheet)
- [x] Set HTTPOnly flag on cookies
- [x] Implement Content Security Policy (CSP)
- [x] Use X-XSS-Protection header (legacy support)
- [x] Encode special characters:
  - `&` → `&amp;`
  - `<` → `&lt;`
  - `>` → `&gt;`
  - `"` → `&quot;`
  - `'` → `&#x27;`
  - `/` → `&#x2F;`
- [x] Use `&#xHH;` for HTML entity encoding
- [x] Use `\uXXXX` for Unicode escaping
- [x] Use `\XX` or `\XXXXXX` for CSS escaping
- [x] Educate users on safe browsing practices

Etienne. Here's Part 6 of the GitHub-ready glossary focused on standards and requirements from the draft.docx attachment. This segment wraps up with:

🧠 Strategic Convergence of AI, Cybersecurity, and Governance

🏛️ Final Deployment Notes for GitHub Pages Integration

📘 Summary of Frameworks, Standards, and Mappings

# 📘 Standards & Requirements Glossary (Part 6)

---

## 🧠 Strategic Convergence: AI, Cybersecurity & Governance

| Domain | Strategic Role | Governance Implication |
|--------|----------------|-------------------------|
| AI Systems | Ethical automation, decision support | Requires oversight of bias, transparency, and accountability |
| Cybersecurity | Protection of digital assets | Requires ISMS, incident response, and board-level visibility |
| Corporate Governance | Strategic direction and stakeholder trust | Requires compliance, ethical oversight, and risk management |

### 🔗 Intersection Points

- AI decisions must be explainable and auditable under board governance
- Cybersecurity controls (e.g., firewalls, access logs) become governance tools
- ISO 27001, GDPR, POPIA, and the AI Act form a unified compliance backbone
- Boards must oversee AI and cyber risks as part of fiduciary duties

---

## 🏛️ GitHub Pages Deployment Notes

### 📁 Suggested Folder Structure


### 🧩 Sidebar Navigation (Docsify or MkDocs)

```yaml
- Glossary Home: index.md
- System Requirements: system-requirements.md
- Governance Frameworks: governance-frameworks.md
- Cybersecurity Standards: cybersecurity-standards.md
- API Security: api-security.md
- XSS Mitigation: xss-mitigation.md
- SQL Injection: sql-injection.md
- Boardroom Integration: boardroom-integration.md
- Lab Setup Guidelines: lab-setup.md

Here's a clean, GitHub-ready markdown summary of the key frameworks and standards referenced in your draft.docx document. 
This format is optimized for GitHub Pages, stakeholder briefings, and modular toolkit deployment.

# 📘 Summary of Frameworks & Standards

This reference consolidates governance, cybersecurity, and penetration testing frameworks into a single, stakeholder-ready summary.

---

## 🏛️ Governance & Compliance Frameworks

| Framework / Standard     | Domain                  | Purpose / Focus Area                                      |
|--------------------------|-------------------------|------------------------------------------------------------|
| King IV                  | Corporate Governance     | Ethical leadership, sustainability, stakeholder inclusivity |
| Companies Act (SA)       | Legal Compliance         | Board duties, fiduciary responsibilities, reporting         |
| Sarbanes-Oxley (SOX)     | Financial Governance     | Internal controls, audit trails, financial transparency     |
| GDPR                     | Data Protection (EU)     | Privacy rights, data handling, breach notification          |
| POPIA                    | Data Protection (SA)     | Lawful processing, consent, security safeguards             |
| AI Act (EU)              | AI Governance            | Risk-based regulation of AI systems                         |

---

## 🤖 AI Governance Standards

| Principle                | Description                                                  |
|--------------------------|--------------------------------------------------------------|
| Ethical Oversight        | Avoid bias, discrimination, and harm                         |
| Transparency             | Ensure explainable decisions and traceable logic             |
| Accountability           | Define ownership and escalation paths                        |
| Compliance               | Align with GDPR, POPIA, AI Act, and ESG mandates             |
| Lifecycle Management     | Govern AI from design to decommissioning                     |

---

## 🔐 Cybersecurity Standards

| Standard / Framework     | Domain                  | Key Features                                                  |
|--------------------------|-------------------------|----------------------------------------------------------------|
| ISO/IEC 27001            | Information Security     | ISMS, risk treatment, access control, incident response        |
| NIST CSF                 | Cybersecurity Governance | Identify, Protect, Detect, Respond, Recover                    |
| FIPS 140-2               | Cryptography             | Validated encryption algorithms and modules                    |
| OWASP ASVS               | App Security             | Verification of secure coding and input/output handling        |
| OWASP WSTG               | Web App Testing          | Manual testing guide for web vulnerabilities                   |
| MITRE ATT&CK             | Threat Modeling          | Tactics, techniques, procedures (TTPs)                         |

---

## 🧪 Penetration Testing Methodologies

| Framework                | Focus Area               | Key Feature                                                   |
|--------------------------|--------------------------|----------------------------------------------------------------|
| PTES                     | General Pentesting        | Repeatable, consistent phases from pre-engagement to reporting |
| NIST SP 800-115          | Security Assessments      | Governance-aligned testing lifecycle                          |
| OSSTMM                   | Operational Security      | Trust analysis, workflow modeling                             |
| ISSAF                    | Systems Assessment        | Comprehensive security evaluation                             |
| STAR                     | Audit Reporting           | Structured format for documenting test results                |

---

## 📚 SQL Standards (ISO/IEC 9075 – 2023 Edition)

| Part        | Title                                | Description                                  |
|-------------|--------------------------------------|----------------------------------------------|
| 9075-1      | SQL/Framework                         | Overall structure, terms, grammar            |
| 9075-2      | SQL/Foundation                        | Core syntax and semantics                    |
| 9075-3      | SQL/CLI                               | Procedural API access                        |
| 9075-4      | SQL/PSM                               | Stored procedures and control structures     |
| 9075-9      | SQL/MED                               | External data access                         |
| 9075-10     | SQL/OLB                               | Object-oriented language bindings            |
| 9075-11     | SQL Schemas                           | Metadata and schema definitions              |
| 9075-13     | SQL/JRT                               | Java integration                             |
| 9075-14     | SQL/XML                               | XML support in SQL                           |
| 9075-15     | SQL/MDA                               | Multidimensional arrays                      |
| 9075-16     | SQL/PGQ                               | Property graph queries                       |

---

## 🔗 Shared Responsibility Models

| Provider     | Model Summary                                             | Governance Implication                                  |
|--------------|-----------------------------------------------------------|----------------------------------------------------------|
| AWS          | AWS secures infrastructure; customer secures data, apps   | Boards must oversee cloud configuration and access       |
| Azure        | Microsoft secures platform; customer secures workloads    | Governance teams align cloud policies with ISO 27001     |
| GCP          | Google secures services; customer secures usage           | Shared risk must be documented in compliance architecture|

---

> ✅ This summary is modular, exportable, and ready for GitHub Pages deployment. 
Use it to scaffold stakeholder briefings, onboarding kits, or compliance dashboards.

